===========================
file 0-add_integer.py
============================

This function defines an integer addition function add_integer(a, b) that returns the sumation of a and b.

Run test with python3 -m doctest -v ./tests/0-add_integer.txt



Usage
=====

import method to test:
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Testing for signed and unsigned int and float:
	>>> print(add_integer(1, 2))
	3
	>>> print(add_integer(1.0, 2.3))
	3
	>>> print(add_integer(1, -2))
	-1
	>>> print(add_integer(1.0, -2.0))
	-1
	>>> print(add_integer(-1, 2))
	1
	>>> print(add_integer(-1.0, 2.0))
	1
	>>> print(add_integer(-1, -2))
	-3
	>>> print(add_integer(-1.0, -2.0))
	-3
	>>> print(add_integer(-1.0, -2.0))
	-3

Testing for default value b=98:
	>>> add_integer(2)
	100
	>>> add_integer(2.0)
	100
	>>> add_integer(-2)
	96
	>>> add_integer(-2.0)
	96


FAIL CASES:
	 
Testing for no argument:
	 >>> print(add_integer(None))
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer
	 
	 >>> print(add_integer(2, None))
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Testing for other data types
	 >>> print(add_integer("ALX"))
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer
	 
	 >>> print(add_integer(4, "School"))
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> print(add_integer("ALX", "School"))
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(float('inf'))
	 Traceback (most recent call last):
	 OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('NaN'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(1, float('NaN'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
